import { notFound } from 'next/navigation';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { CodeBlock } from '@/components/shared/code-block';
import { getTool, getTools } from '@/lib/supabase/tools';

// Revalidate every minute
export const revalidate = 60;

// Allow dynamic params that aren't generated by generateStaticParams
export const dynamicParams = true;

// Fetch tool code from HTTP endpoint
async function fetchToolCode(userId: string, toolName: string): Promise<string> {
  try {
    // Normalize name for URL
    const normalizedToolName = toolName.toLowerCase().replace(/\s+/g, '-');
    
    // Construct the URL to the tool file
    const apiUrl = process.env.NEXT_PUBLIC_COOPER_API || 'http://localhost:8787';
    const url = `${apiUrl}/${userId}/${normalizedToolName}`;
    
    console.log(`Fetching tool code from: ${url}`);
    
    // Fetch the file content with no cache to ensure fresh content
    const response = await fetch(url);
    
    if (response.ok) {
      // Get the content as text
      const content = await response.text();
      console.log(`Successfully fetched tool code (${content.length} bytes)`);
      return content;
    } else {
      console.error(`Failed to fetch tool code: ${response.status} ${response.statusText} from ${url}`);
      return `// Tool code not available - API returned ${response.status}\n// URL attempted: ${url}`;
    }
  } catch (error) {
    console.error('Error fetching tool code:', error);
    return `// Error loading tool code: ${error instanceof Error ? error.message : 'Unknown error'}\n// This is a fallback message to ensure something displays.`;
  }
}

// Pre-render the most recent tools at build time
export async function generateStaticParams() {
  const tools = await getTools(10);
  return tools.map((tool) => ({
    owner: tool.owner_username,
    handle: tool.tool_handle,
  }));
}

type PageProps = {
  params: Promise<{
    owner: string;
    handle: string;
  }>;
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>;
};

export default async function ToolPage({
  params,
}: PageProps) {
  const { owner, handle } = await params;
  
  // Get tool data (capabilities are only fetched for multi-capability tools)
  const tool = await getTool(owner, handle);
  if (!tool) {
    notFound();
  }

  // Fetch the tool code
  const toolCode = await fetchToolCode(tool.owner_id, tool.name);

  // Determine if this is a single-capability tool for UI rendering
  const isSingleCapabilityTool = tool.type === 'single-capability';

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header Section */}
      <div className="bg-white border-b">
        <div className="container mx-auto px-4 py-8">
          <div>
            <div className="flex items-center gap-3 mb-2">
              <h1 className="text-3xl font-bold">{tool.name}</h1>
              <div className="px-2 py-1 rounded-full bg-gray-100 text-sm text-gray-600">
                by {tool.owner_username}
              </div>
            </div>
            <p className="text-lg text-gray-600 max-w-3xl">
              {tool.description}
            </p>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="container mx-auto px-4 py-8">
        <div className="grid grid-cols-12 gap-6">
          {/* Sidebar */}
          <div className="col-span-3">
            <div className="bg-white rounded-lg border p-4 sticky top-20">
              <h3 className="font-semibold mb-3">Tool Information</h3>
              <dl className="space-y-2">
                <div>
                  <dt className="text-sm text-gray-500">By</dt>
                  <dd className="font-mono text-sm">{tool.owner_username}</dd>
                </div>
                <div>
                  <dt className="text-sm text-gray-500">Tool Type</dt>
                  <dd className="font-mono text-sm">{tool.type}</dd>
                </div>
                <div>
                  <dt className="text-sm text-gray-500">Capabilities</dt>
                  <dd className="font-mono text-sm">
                    {isSingleCapabilityTool ? (
                      <span className="inline-flex items-center rounded-full bg-blue-50 px-2 py-1 text-xs font-medium text-blue-700">
                        Single Capability
                      </span>
                    ) : (
                      tool.capabilities.length
                    )}
                  </dd>
                </div>
              </dl>
            </div>
          </div>

          {/* Main Content with Tabs */}
          <div className="col-span-9">
            <Tabs defaultValue="code" className="w-full">
              <TabsList className="mb-4">
                <TabsTrigger value="code">Code</TabsTrigger>
                {!isSingleCapabilityTool && (
                  <TabsTrigger value="capabilities">Capabilities</TabsTrigger>
                )}
              </TabsList>

              {/* Code Tab */}
              <TabsContent value="code">
                <div className="bg-white rounded-lg border overflow-hidden">
                  <div className="max-h-[70vh] overflow-auto">
                    <CodeBlock code={toolCode} language="typescript" />
                  </div>
                </div>
              </TabsContent>

              {/* Capabilities Tab - Only shown for multi-capability tools */}
              {!isSingleCapabilityTool && (
                <TabsContent value="capabilities">
                  <h2 className="text-2xl font-semibold mb-4">Capabilities</h2>
                  <Accordion type="single" collapsible className="space-y-4">
                    {tool.capabilities.map((capability) => (
                      <AccordionItem key={capability.id} value={String(capability.id)} className="bg-white rounded-lg border overflow-hidden">
                        <AccordionTrigger className="px-6 py-4 hover:no-underline">
                          <div>
                            <h3 className="text-lg font-semibold">{capability.name}</h3>
                            <p className="text-sm text-gray-500 text-left">
                              {capability.description || 'No description available'}
                            </p>
                          </div>
                        </AccordionTrigger>
                        <AccordionContent className="px-6 pb-4">
                          <Tabs defaultValue="code" className="w-full">
                            <TabsList>
                              <TabsTrigger value="code">Code</TabsTrigger>
                            </TabsList>
                            <TabsContent value="code" className="mt-4">
                              <div className="rounded-lg overflow-hidden border">
                                <div className="max-h-[50vh] overflow-auto">
                                  <CodeBlock code={capability.runner || capability.schema || '// No code available'} language="typescript" />
                                </div>
                              </div>
                            </TabsContent>
                          </Tabs>
                        </AccordionContent>
                      </AccordionItem>
                    ))}
                  </Accordion>
                </TabsContent>
              )}
            </Tabs>
          </div>
        </div>
      </div>
    </div>
  );
} 