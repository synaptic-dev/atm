---
description: This rule describes how to maintain the project structure and organization for a Next.js Project
globs: 
alwaysApply: false
---
Next.js Project Structure and Organization Guidelines

PROJECT STRUCTURE PRINCIPLES
The goal of this structure is to provide a clear, scalable organization that leverages Next.js App Router features while maintaining good separation of concerns.

DIRECTORY STRUCTURE

project
├── app/                     # Next.js App Router root
│   ├── api/                 # API routes
│   ├── components/          # Components specific to root layout
│   ├── [page]/              # Route groups (e.g., tools/, auth/)
│   │   ├── components/      # Page-specific components
│   │   ├── actions.ts       # Server actions for this route
│   │   ├── page.tsx         # Page component
│   │   └── layout.tsx       # Optional layout for this route
├── components/              # Shared components
│   ├── ui/                  # UI primitives and design system
│   └── shared/              # Reusable feature components
├── lib/                     # Utility libraries
│   ├── hooks/               # React hooks
│   ├── utils/               # Utility functions
│   └── supabase/            # Database and API integrations
├── types/                   # TypeScript type definitions
└── public/                  # Static assets

NAMING CONVENTIONS

1. All Directories (including React component directories): Use kebab-case for directories (e.g., user-settings/).

2. Files:
   - All Files (including React component Files): Use kebab-case for all file names (e.g., button.tsx, user-profile.tsx, date-utils.ts).
   - Next.js Special Files: Use the standard Next.js naming (e.g., page.tsx, layout.tsx, loading.tsx).

COMPONENT ORGANIZATION

1. Component Placement:
   - Page-specific components: Place in /app/[page]/components/ if only used within that page.
   - Layout components: Place in /app/components/ if only used in the root layout.
   - Shared components: Place in /components/shared/ if used across multiple pages.
   - UI primitives: Place in /components/ui/ for base UI components.

2. Component Directory Structure: For complex components, use a directory structure:

   components/shared/data-table/
   ├── data-table.tsx         # Main component
   ├── data-table-header.tsx  # Sub-component
   ├── data-table-row.tsx     # Sub-component
   └── index.ts               # Re-export the main component

DATA HANDLING

1. Server Actions: Place page-specific server actions in app/[page]/actions.ts.
2. API Routes: Place in app/api/[route]/route.ts.
3. Database Logic: Place in lib/supabase/ or appropriate data integration directory.

BEST PRACTICES

1. Use the App Router features like server components, loading states, and error boundaries.
2. Minimize client components - use 'use client' only when necessary.
3. Keep components focused and composable.
4. Prioritize co-location of files that change together.
5. For very large applications, consider route groups to further organize the codebase.

MIGRATION NOTES

When refactoring existing code to match this structure:
1. Start with moving components to their appropriate locations.
2. Update imports using search and replace.
3. Test each page after refactoring to ensure functionality is preserved. Next.js Project Structure and Organization Guidelines

PROJECT STRUCTURE PRINCIPLES
The goal of this structure is to provide a clear, scalable organization that leverages Next.js App Router features while maintaining good separation of concerns.

DIRECTORY STRUCTURE

project
├── app/                     # Next.js App Router root
│   ├── api/                 # API routes
│   ├── components/          # Components specific to root layout
│   ├── [page]/              # Route groups (e.g., tools/, auth/)
│   │   ├── components/      # Page-specific components
│   │   ├── actions.ts       # Server actions for this route
│   │   ├── page.tsx         # Page component
│   │   └── layout.tsx       # Optional layout for this route
├── components/              # Shared components
│   ├── ui/                  # UI primitives and design system
│   └── shared/              # Reusable feature components
├── lib/                     # Utility libraries
│   ├── hooks/               # React hooks
│   ├── utils/               # Utility functions
│   └── supabase/            # Database and API integrations
├── types/                   # TypeScript type definitions
└── public/                  # Static assets

NAMING CONVENTIONS

1. All Directories (including React component directories): Use kebab-case for directories (e.g., user-settings/).

2. Files:
   - All Files (including React component Files): Use kebab-case for all file names (e.g., button.tsx, user-profile.tsx, date-utils.ts).
   - Next.js Special Files: Use the standard Next.js naming (e.g., page.tsx, layout.tsx, loading.tsx).

COMPONENT ORGANIZATION

1. Component Placement:
   - Page-specific components: Place in /app/[page]/components/ if only used within that page.
   - Layout components: Place in /app/components/ if only used in the root layout.
   - Shared components: Place in /components/shared/ if used across multiple pages.
   - UI primitives: Place in /components/ui/ for base UI components.

2. Component Directory Structure: For complex components, use a directory structure:

   components/shared/data-table/
   ├── data-table.tsx         # Main component
   ├── data-table-header.tsx  # Sub-component
   ├── data-table-row.tsx     # Sub-component
   └── index.ts               # Re-export the main component

DATA HANDLING

1. Server Actions: Place page-specific server actions in app/[page]/actions.ts.
2. API Routes: Place in app/api/[route]/route.ts.
3. Database Logic: Place in lib/supabase/ or appropriate data integration directory.

BEST PRACTICES

1. Use the App Router features like server components, loading states, and error boundaries.
2. Minimize client components - use 'use client' only when necessary.
3. Keep components focused and composable.
4. Prioritize co-location of files that change together.
5. For very large applications, consider route groups to further organize the codebase.

MIGRATION NOTES

When refactoring existing code to match this structure:
1. Start with moving components to their appropriate locations.
2. Update imports using search and replace.
3. Test each page after refactoring to ensure functionality is preserved. Next.js Project Structure and Organization Guidelines

PROJECT STRUCTURE PRINCIPLES
The goal of this structure is to provide a clear, scalable organization that leverages Next.js App Router features while maintaining good separation of concerns.

DIRECTORY STRUCTURE

project
├── app/                     # Next.js App Router root
│   ├── api/                 # API routes
│   ├── components/          # Components specific to root layout
│   ├── [page]/              # Route groups (e.g., tools/, auth/)
│   │   ├── components/      # Page-specific components
│   │   ├── actions.ts       # Server actions for this route
│   │   ├── page.tsx         # Page component
│   │   └── layout.tsx       # Optional layout for this route
├── components/              # Shared components
│   ├── ui/                  # UI primitives and design system
│   └── shared/              # Reusable feature components
├── lib/                     # Utility libraries
│   ├── hooks/               # React hooks
│   ├── utils/               # Utility functions
│   └── supabase/            # Database and API integrations
├── types/                   # TypeScript type definitions
└── public/                  # Static assets

NAMING CONVENTIONS

1. All Directories (including React component directories): Use kebab-case for directories (e.g., user-settings/).

2. Files:
   - All Files (including React component Files): Use kebab-case for all file names (e.g., button.tsx, user-profile.tsx, date-utils.ts).
   - Next.js Special Files: Use the standard Next.js naming (e.g., page.tsx, layout.tsx, loading.tsx).

COMPONENT ORGANIZATION

1. Component Placement:
   - Page-specific components: Place in /app/[page]/components/ if only used within that page.
   - Layout components: Place in /app/components/ if only used in the root layout.
   - Shared components: Place in /components/shared/ if used across multiple pages.
   - UI primitives: Place in /components/ui/ for base UI components.

2. Component Directory Structure: For complex components, use a directory structure:

   components/shared/data-table/
   ├── data-table.tsx         # Main component
   ├── data-table-header.tsx  # Sub-component
   ├── data-table-row.tsx     # Sub-component
   └── index.ts               # Re-export the main component

DATA HANDLING

1. Server Actions: Place page-specific server actions in app/[page]/actions.ts.
2. API Routes: Place in app/api/[route]/route.ts.
3. Database Logic: Place in lib/supabase/ or appropriate data integration directory.

BEST PRACTICES

1. Use the App Router features like server components, loading states, and error boundaries.
2. Minimize client components - use 'use client' only when necessary.
3. Keep components focused and composable.
4. Prioritize co-location of files that change together.
5. For very large applications, consider route groups to further organize the codebase.

MIGRATION NOTES

When refactoring existing code to match this structure:
1. Start with moving components to their appropriate locations.
2. Update imports using search and replace.
3. Test each page after refactoring to ensure functionality is preserved. Next.js Project Structure and Organization Guidelines

PROJECT STRUCTURE PRINCIPLES
The goal of this structure is to provide a clear, scalable organization that leverages Next.js App Router features while maintaining good separation of concerns.

DIRECTORY STRUCTURE

project
├── app/                     # Next.js App Router root
│   ├── api/                 # API routes
│   ├── components/          # Components specific to root layout
│   ├── [page]/              # Route groups (e.g., tools/, auth/)
│   │   ├── components/      # Page-specific components
│   │   ├── actions.ts       # Server actions for this route
│   │   ├── page.tsx         # Page component
│   │   └── layout.tsx       # Optional layout for this route
├── components/              # Shared components
│   ├── ui/                  # UI primitives and design system
│   └── shared/              # Reusable feature components
├── lib/                     # Utility libraries
│   ├── hooks/               # React hooks
│   ├── utils/               # Utility functions
│   └── supabase/            # Database and API integrations
├── types/                   # TypeScript type definitions
└── public/                  # Static assets

NAMING CONVENTIONS

1. All Directories (including React component directories): Use kebab-case for directories (e.g., user-settings/).

2. Files:
   - All Files (including React component Files): Use kebab-case for all file names (e.g., button.tsx, user-profile.tsx, date-utils.ts).
   - Next.js Special Files: Use the standard Next.js naming (e.g., page.tsx, layout.tsx, loading.tsx).

COMPONENT ORGANIZATION

1. Component Placement:
   - Page-specific components: Place in /app/[page]/components/ if only used within that page.
   - Layout components: Place in /app/components/ if only used in the root layout.
   - Shared components: Place in /components/shared/ if used across multiple pages.
   - UI primitives: Place in /components/ui/ for base UI components.

2. Component Directory Structure: For complex components, use a directory structure:

   components/shared/data-table/
   ├── data-table.tsx         # Main component
   ├── data-table-header.tsx  # Sub-component
   ├── data-table-row.tsx     # Sub-component
   └── index.ts               # Re-export the main component

DATA HANDLING

1. Server Actions: Place page-specific server actions in app/[page]/actions.ts.
2. API Routes: Place in app/api/[route]/route.ts.
3. Database Logic: Place in lib/supabase/ or appropriate data integration directory.

BEST PRACTICES

1. Use the App Router features like server components, loading states, and error boundaries.
2. Minimize client components - use 'use client' only when necessary.
3. Keep components focused and composable.
4. Prioritize co-location of files that change together.
5. For very large applications, consider route groups to further organize the codebase.

MIGRATION NOTES

When refactoring existing code to match this structure:
1. Start with moving components to their appropriate locations.
2. Update imports using search and replace.
3. Test each page after refactoring to ensure functionality is preserved. Next.js Project Structure and Organization Guidelines

PROJECT STRUCTURE PRINCIPLES
The goal of this structure is to provide a clear, scalable organization that leverages Next.js App Router features while maintaining good separation of concerns.

DIRECTORY STRUCTURE

project
├── app/                     # Next.js App Router root
│   ├── api/                 # API routes
│   ├── components/          # Components specific to root layout
│   ├── [page]/              # Route groups (e.g., tools/, auth/)
│   │   ├── components/      # Page-specific components
│   │   ├── actions.ts       # Server actions for this route
│   │   ├── page.tsx         # Page component
│   │   └── layout.tsx       # Optional layout for this route
├── components/              # Shared components
│   ├── ui/                  # UI primitives and design system
│   └── shared/              # Reusable feature components
├── lib/                     # Utility libraries
│   ├── hooks/               # React hooks
│   ├── utils/               # Utility functions
│   └── supabase/            # Database and API integrations
├── types/                   # TypeScript type definitions
└── public/                  # Static assets

NAMING CONVENTIONS

1. All Directories (including React component directories): Use kebab-case for directories (e.g., user-settings/).

2. Files:
   - All Files (including React component Files): Use kebab-case for all file names (e.g., button.tsx, user-profile.tsx, date-utils.ts).
   - Next.js Special Files: Use the standard Next.js naming (e.g., page.tsx, layout.tsx, loading.tsx).

COMPONENT ORGANIZATION

1. Component Placement:
   - Page-specific components: Place in /app/[page]/components/ if only used within that page.
   - Layout components: Place in /app/components/ if only used in the root layout.
   - Shared components: Place in /components/shared/ if used across multiple pages.
   - UI primitives: Place in /components/ui/ for base UI components.

2. Component Directory Structure: For complex components, use a directory structure:

   components/shared/data-table/
   ├── data-table.tsx         # Main component
   ├── data-table-header.tsx  # Sub-component
   ├── data-table-row.tsx     # Sub-component
   └── index.ts               # Re-export the main component

DATA HANDLING

1. Server Actions: Place page-specific server actions in app/[page]/actions.ts.
2. API Routes: Place in app/api/[route]/route.ts.
3. Database Logic: Place in lib/supabase/ or appropriate data integration directory.

BEST PRACTICES

1. Use the App Router features like server components, loading states, and error boundaries.
2. Minimize client components - use 'use client' only when necessary.
3. Keep components focused and composable.
4. Prioritize co-location of files that change together.
5. For very large applications, consider route groups to further organize the codebase.

MIGRATION NOTES

When refactoring existing code to match this structure:
1. Start with moving components to their appropriate locations.
2. Update imports using search and replace.
3. Test each page after refactoring to ensure functionality is preserved. Next.js Project Structure and Organization Guidelines

PROJECT STRUCTURE PRINCIPLES
The goal of this structure is to provide a clear, scalable organization that leverages Next.js App Router features while maintaining good separation of concerns.

DIRECTORY STRUCTURE

project
├── app/                     # Next.js App Router root
│   ├── api/                 # API routes
│   ├── components/          # Components specific to root layout
│   ├── [page]/              # Route groups (e.g., tools/, auth/)
│   │   ├── components/      # Page-specific components
│   │   ├── actions.ts       # Server actions for this route
│   │   ├── page.tsx         # Page component
│   │   └── layout.tsx       # Optional layout for this route
├── components/              # Shared components
│   ├── ui/                  # UI primitives and design system
│   └── shared/              # Reusable feature components
├── lib/                     # Utility libraries
│   ├── hooks/               # React hooks
│   ├── utils/               # Utility functions
│   └── supabase/            # Database and API integrations
├── types/                   # TypeScript type definitions
└── public/                  # Static assets

NAMING CONVENTIONS

1. All Directories (including React component directories): Use kebab-case for directories (e.g., user-settings/).

2. Files:
   - All Files (including React component Files): Use kebab-case for all file names (e.g., button.tsx, user-profile.tsx, date-utils.ts).
   - Next.js Special Files: Use the standard Next.js naming (e.g., page.tsx, layout.tsx, loading.tsx).

COMPONENT ORGANIZATION

1. Component Placement:
   - Page-specific components: Place in /app/[page]/components/ if only used within that page.
   - Layout components: Place in /app/components/ if only used in the root layout.
   - Shared components: Place in /components/shared/ if used across multiple pages.
   - UI primitives: Place in /components/ui/ for base UI components.

2. Component Directory Structure: For complex components, use a directory structure:

   components/shared/data-table/
   ├── data-table.tsx         # Main component
   ├── data-table-header.tsx  # Sub-component
   ├── data-table-row.tsx     # Sub-component
   └── index.ts               # Re-export the main component

DATA HANDLING

1. Server Actions: Place page-specific server actions in app/[page]/actions.ts.
2. API Routes: Place in app/api/[route]/route.ts.
3. Database Logic: Place in lib/supabase/ or appropriate data integration directory.

BEST PRACTICES

1. Use the App Router features like server components, loading states, and error boundaries.
2. Minimize client components - use 'use client' only when necessary.
3. Keep components focused and composable.
4. Prioritize co-location of files that change together.
5. For very large applications, consider route groups to further organize the codebase.

MIGRATION NOTES

When refactoring existing code to match this structure:
1. Start with moving components to their appropriate locations.
2. Update imports using search and replace.
3. Test each page after refactoring to ensure functionality is preserved. 